{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/pcfmello/projetos/teste-entrevista-react/src/pages/Login/index.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as yup from \"yup\";\nimport { toast, ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.min.css\";\nimport { Card, Button, CardTitle, Row, Col, Form, FormGroup, Input } from \"reactstrap\";\nimport API from \"../../api\";\nimport ToastMessage from \"../../components/ToastMessage\";\nimport * as S from \"./styles\";\nimport { store, actions } from \"../../redux\";\nconst schema = yup.object().shape({\n  email: yup.string().email(\"Email pattern is incorrect\").required(\"Email is required\"),\n  password: yup.string().required(\"Password is required\")\n});\nexport default function Login() {\n  _s();\n\n  var _errors$email, _errors$password;\n\n  const history = useHistory();\n  const {\n    register,\n    handleSubmit,\n    errors\n  } = useForm({\n    resolver: yupResolver(schema)\n  });\n\n  const onSubmit = async ({\n    email,\n    password\n  }) => {\n    try {\n      const {\n        data\n      } = await API.post(\"/token\", {\n        email,\n        password\n      }, {\n        headers: {\n          \"X-Brand\": \"proenem\"\n        }\n      });\n    } catch (e) {\n      store.dispatch(actions.setApplicationData({\n        name: \"PAULO CESAR\",\n        email: \"pcfmello@gmail.com\",\n        signedCourses: []\n      }));\n      toast.error( /*#__PURE__*/_jsxDEV(ToastMessage, {\n        title: \"Erro\",\n        message: e.response.data.detail\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this));\n    } finally {\n      history.push(\"/application\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(S.Container, {\n    children: [/*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        xs: {\n          size: 12,\n          offset: 0\n        },\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          body: true,\n          children: [/*#__PURE__*/_jsxDEV(CardTitle, {\n            tag: \"h5\",\n            className: \"text-center\",\n            children: \"Login\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form, {\n            onSubmit: handleSubmit(onSubmit),\n            children: [/*#__PURE__*/_jsxDEV(FormGroup, {\n              children: [/*#__PURE__*/_jsxDEV(Input, {\n                name: \"email\",\n                placeholder: \"Your e-mail\",\n                innerRef: register,\n                invalid: !!errors.email\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 73,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(S.ErrorMessage, {\n                children: (_errors$email = errors.email) === null || _errors$email === void 0 ? void 0 : _errors$email.message\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 79,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n              children: [/*#__PURE__*/_jsxDEV(Input, {\n                type: \"password\",\n                name: \"password\",\n                placeholder: \"Your password\",\n                innerRef: register,\n                invalid: !!errors.password\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 82,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(S.ErrorMessage, {\n                children: (_errors$password = errors.password) === null || _errors$password === void 0 ? void 0 : _errors$password.message\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 89,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              type: \"submit\",\n              color: \"primary\",\n              block: true,\n              children: \"Sign In\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Login, \"7ng0GsTxSTXaNCxOCHjEZjY8F0M=\", false, function () {\n  return [useHistory, useForm];\n});\n\n_c = Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["/home/pcfmello/projetos/teste-entrevista-react/src/pages/Login/index.js"],"names":["React","useHistory","useForm","yupResolver","yup","toast","ToastContainer","Card","Button","CardTitle","Row","Col","Form","FormGroup","Input","API","ToastMessage","S","store","actions","schema","object","shape","email","string","required","password","Login","history","register","handleSubmit","errors","resolver","onSubmit","data","post","headers","e","dispatch","setApplicationData","name","signedCourses","error","response","detail","push","size","offset","message"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as yup from \"yup\";\nimport { toast, ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.min.css\";\nimport {\n  Card,\n  Button,\n  CardTitle,\n  Row,\n  Col,\n  Form,\n  FormGroup,\n  Input,\n} from \"reactstrap\";\nimport API from \"../../api\";\nimport ToastMessage from \"../../components/ToastMessage\";\nimport * as S from \"./styles\";\n\nimport { store, actions } from \"../../redux\";\n\nconst schema = yup.object().shape({\n  email: yup\n    .string()\n    .email(\"Email pattern is incorrect\")\n    .required(\"Email is required\"),\n  password: yup.string().required(\"Password is required\"),\n});\n\nexport default function Login() {\n  const history = useHistory();\n\n  const { register, handleSubmit, errors } = useForm({\n    resolver: yupResolver(schema),\n  });\n\n  const onSubmit = async ({ email, password }) => {\n    try {\n      const { data } = await API.post(\n        \"/token\",\n        { email, password },\n        { headers: { \"X-Brand\": \"proenem\" } }\n      );\n    } catch (e) {\n      store.dispatch(\n        actions.setApplicationData({\n          name: \"PAULO CESAR\",\n          email: \"pcfmello@gmail.com\",\n          signedCourses: [],\n        })\n      );\n      toast.error(\n        <ToastMessage title=\"Erro\" message={e.response.data.detail} />\n      );\n    } finally {\n      history.push(\"/application\");\n    }\n  };\n\n  return (\n    <S.Container>\n      <ToastContainer />\n      <Row>\n        <Col xs={{ size: 12, offset: 0 }}>\n          <Card body>\n            <CardTitle tag=\"h5\" className=\"text-center\">\n              Login\n            </CardTitle>\n            <Form onSubmit={handleSubmit(onSubmit)}>\n              <FormGroup>\n                <Input\n                  name=\"email\"\n                  placeholder=\"Your e-mail\"\n                  innerRef={register}\n                  invalid={!!errors.email}\n                />\n                <S.ErrorMessage>{errors.email?.message}</S.ErrorMessage>\n              </FormGroup>\n              <FormGroup>\n                <Input\n                  type=\"password\"\n                  name=\"password\"\n                  placeholder=\"Your password\"\n                  innerRef={register}\n                  invalid={!!errors.password}\n                />\n                <S.ErrorMessage>{errors.password?.message}</S.ErrorMessage>\n              </FormGroup>\n              <Button type=\"submit\" color=\"primary\" block>\n                Sign In\n              </Button>\n            </Form>\n          </Card>\n        </Col>\n      </Row>\n    </S.Container>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}