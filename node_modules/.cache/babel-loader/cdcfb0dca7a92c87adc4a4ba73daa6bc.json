{"ast":null,"code":"import { createStore, combineReducers, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nconst INITIAL_STATE = {\n  isLoading: false,\n  user: {\n    name: \"\",\n    email: \"\",\n    signedCourses: []\n  }\n}; // REDUCER\n\nconst authReducer = (state = INITIAL_STATE, action) => {\n  const {\n    payload,\n    type\n  } = action;\n\n  switch (type) {\n    case \"GET_USER_DATA\":\n      {\n        return { ...state,\n          user: {\n            name: payload.name,\n            email: payload.email,\n            signedCourses: payload.signedCourses\n          }\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nconst reducers = combineReducers({\n  authReducer\n});\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst middlewares = [thunk]; // STORE\n\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(...middlewares))); // ACTIONS\n\nconst actions = {\n  getUserData: applicationData => ({\n    type: \"GET_USER_DATA\",\n    payload: applicationData\n  })\n};\nexport { store, actions };","map":{"version":3,"sources":["/home/pcfmello/projetos/teste-entrevista-react/src/redux/index.js"],"names":["createStore","combineReducers","applyMiddleware","compose","thunk","INITIAL_STATE","isLoading","user","name","email","signedCourses","authReducer","state","action","payload","type","reducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","middlewares","store","actions","getUserData","applicationData"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,EAAwDC,OAAxD,QAAuE,OAAvE;AACA,OAAOC,KAAP,MAAkB,aAAlB;AAEA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,SAAS,EAAE,KADS;AAEpBC,EAAAA,IAAI,EAAE;AACJC,IAAAA,IAAI,EAAE,EADF;AAEJC,IAAAA,KAAK,EAAE,EAFH;AAGJC,IAAAA,aAAa,EAAE;AAHX;AAFc,CAAtB,C,CASA;;AACA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGP,aAAT,EAAwBQ,MAAxB,KAAmC;AACrD,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAoBF,MAA1B;;AACA,UAAQE,IAAR;AACE,SAAK,eAAL;AAAsB;AACpB,eAAO,EACL,GAAGH,KADE;AAELL,UAAAA,IAAI,EAAE;AACJC,YAAAA,IAAI,EAAEM,OAAO,CAACN,IADV;AAEJC,YAAAA,KAAK,EAAEK,OAAO,CAACL,KAFX;AAGJC,YAAAA,aAAa,EAAEI,OAAO,CAACJ;AAHnB;AAFD,SAAP;AAQD;;AACD;AACE,aAAOE,KAAP;AAZJ;AAcD,CAhBD;;AAkBA,MAAMI,QAAQ,GAAGf,eAAe,CAAC;AAC/BU,EAAAA;AAD+B,CAAD,CAAhC;AAIA,MAAMM,gBAAgB,GAAGC,MAAM,CAACC,oCAAP,IAA+ChB,OAAxE;AACA,MAAMiB,WAAW,GAAG,CAAChB,KAAD,CAApB,C,CAEA;;AACA,MAAMiB,KAAK,GAAGrB,WAAW,CACvBgB,QADuB,EAEvBC,gBAAgB,CAACf,eAAe,CAAC,GAAGkB,WAAJ,CAAhB,CAFO,CAAzB,C,CAKA;;AACA,MAAME,OAAO,GAAG;AACdC,EAAAA,WAAW,EAAGC,eAAD,KAAsB;AACjCT,IAAAA,IAAI,EAAE,eAD2B;AAEjCD,IAAAA,OAAO,EAAEU;AAFwB,GAAtB;AADC,CAAhB;AAOA,SAASH,KAAT,EAAgBC,OAAhB","sourcesContent":["import { createStore, combineReducers, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\n\nconst INITIAL_STATE = {\n  isLoading: false,\n  user: {\n    name: \"\",\n    email: \"\",\n    signedCourses: [],\n  },\n};\n\n// REDUCER\nconst authReducer = (state = INITIAL_STATE, action) => {\n  const { payload, type } = action;\n  switch (type) {\n    case \"GET_USER_DATA\": {\n      return {\n        ...state,\n        user: {\n          name: payload.name,\n          email: payload.email,\n          signedCourses: payload.signedCourses,\n        },\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nconst reducers = combineReducers({\n  authReducer,\n});\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst middlewares = [thunk];\n\n// STORE\nconst store = createStore(\n  reducers,\n  composeEnhancers(applyMiddleware(...middlewares))\n);\n\n// ACTIONS\nconst actions = {\n  getUserData: (applicationData) => ({\n    type: \"GET_USER_DATA\",\n    payload: applicationData,\n  }),\n};\n\nexport { store, actions };\n"]},"metadata":{},"sourceType":"module"}